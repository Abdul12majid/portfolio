;(function (define) {
    define(['jquery'], function ($) {
        return (function () {
            function error(message, title, optionsOverride) {
                notify(title, message, "error", optionsOverride);
            }

            function info(message, title, optionsOverride) {
                notify(title, message, "info", optionsOverride);
            }

            function success(message, title, optionsOverride) {
                notify(title, message, "success", optionsOverride);
            }

            function warning(message, title, optionsOverride) {
                notify(title, message, "warning", optionsOverride);
            }


            function question(message, title, optionsOverride) {
                notify(title, message, "question", optionsOverride);
            }

            function notify(message, title, type, optionsOverride) {
                newOptions = {
                    title: title,
                    text: message,
                    icon: type,
                };
                var options = getOptions(optionsOverride, newOptions);
                Swal.fire(options);
            }

            function getDefaults() {
                return {
                    toast: true,
                    position: "top-end",
                    showCloseButton: true,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: false,
                    width: ($('body').width() * 0.8) + "px",
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                };
            }

            function getOptions(optionsOverride, appOptions) {
                return $.extend({}, getDefaults(), optionsOverride, appOptions);
            }

            var toastr = {
                options: {},
                error: error,
                info: info,
                success: success,
                warning: warning,
            };

            return toastr;
        })();
    });
}(typeof define === 'function' && define.amd ? define : function (deps, factory) {
    if (typeof module !== 'undefined' && module.exports) { //Node
        module.exports = factory(require('jquery'));
    } else {
        window.toastr = factory(window.jQuery);
    }
}));

;(function($) {
    var subscriptions = {};
    
    $.subscriptions = function(eventType) {
        var x = subscriptions[eventType];
        if(x === undefined || x === null){
            return [];
        }
        return x;
    }
        
    $.subscribe = function(eventType, callback, params) {
        if (typeof(callback) !== "function"){
           throw "callback must be a function";
        }
        if(subscriptions[eventType] === undefined || subscriptions[eventType] === null) {
            subscriptions[eventType] = [];
        }
        subscriptions[eventType].push({ callback: callback, params: params } );
    }
    
    $.unsubscribe = function(eventType, callback) {
        if (!(eventType in subscriptions) || subscriptions[eventType].length === 0) {
            return;
        }
        subscriptions[eventType] = $.filter(subscriptions[eventType], function(subscription) {
            return subscription.callback !== callback;
        });
    }
    
    $.publish = function(eventType, data) {
        $.each(subscriptions[eventType], function(index, subscription) {
            subscription.callback.apply(null, [ data ]);
        });
    }
})(jQuery);

;(function ($) {
    $.fn.clearForm = function (options) {
        var settings = $.extend({
            form: this.closest('form')
        }, options);

        var $form = $(settings.form);

        $form.find(".validation-summary-errors")
            .removeClass("validation-summary-errors")
            .addClass("validation-summary-valid")
            .find("ul").empty();

        $form.find(".field-validation-error")
            .removeClass("field-validation-error")
            .addClass("field-validation-valid")
            .empty();

        return $form;
    };

    $.fn.showErrors = function (options) {
        var settings = $.extend({
            form: this.closest('form'),
            errors: []
        }, options);

        var $form = $(settings.form);

        var errors = settings.errors;
        for (var i in errors) {
            var propertyName = errors[i].propertyName;
            var errorMessage = errors[i].message;

            var $error = $form.find("[data-valmsg-for='" + propertyName + "']");

            $error.html("<span>" + errorMessage + "</span>")
                .removeClass("field-validation-valid")
                .addClass("field-validation-error")

            if (i === 0) {
                $("[name='" + propertyName + "']").focus();
            }
        }

        return $form;
    };

    $.fn.disableSubmitButtons = function (options) {
        var settings = $.extend({
            form: this.closest('form')
        }, options);

        var $form = $(settings.formId);

        $form.find("button[type='submit']").attr('disabled', 'disabled');
        $form.closest(".slide-out-panel").find("button[type='submit']").attr('disabled', 'disabled');

        return $form;
    };

    $.fn.enableSubmitButtons = function (options) {
        var settings = $.extend({
            form: this.closest('form')
        }, options);

        var $form = $(settings.formId);

        $form.find("button[type='submit']").removeAttr('disabled');
        $form.closest(".slide-out-panel").find("button[type='submit']").removeAttr('disabled');

        return $form;
    };
}(jQuery));

// FORM HELPER
(function ($) {
    "use strict";

    function mobileAndTabletcheck() {
        var check = false;
        (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    };

    function callFunction(name, result) {
        var parts = name.split(".");
        var n;
        var obj = window;
        for (n = 0; n < parts.length; ++n) {
            obj = obj[parts[n]];
            if (!obj) {
                return;
            }
        }
        return obj ? obj(result) : undefined;
    }

    $.formhelper = function (options, el) {
        var self = this;
        var $form = $(el);

        if (window.FormData === undefined) {
            $form.disableSubmitButtons();
            alert("Your browser is not compatible with Form Helper! Please update your browser.");
            return;
        }

        options = $.extend({}, $.formhelper.defaultOptions, options);
        
        $form.unbind('submit');

        $form.on('submit', function (e) {

            e.preventDefault();

            var captchaScriptUrl = 'https://www.google.com/recaptcha/api.js?render=',
                captchaKey = null,
                $captchaScript = $("script[src^='" + captchaScriptUrl+ "']");

            if ($captchaScript.length) {
                captchaKey = $captchaScript.attr('src').substr(captchaScriptUrl.length);
            }

            if (!captchaKey) {
                sendForm(null);
                return;
            }

            grecaptcha.ready(function () {
                grecaptcha.execute(captchaKey, { action: 'submit' }).then(function (token) {
                    sendForm(token);
                });
            });
        });

        function sendForm(token) {
            var toastrOptions = {
                position: mobileAndTabletcheck() ? "formhelper-toast-top-full-width" : options.position
            };

            $form.clearForm();

            $form.disableSubmitButtons();

            var headers = {};
            var formData = {};
            var contentType = {};


            var captchaFormKey = "g-recaptcha-response";

            if (options.dataType === "FormData") {
                formData = new FormData($form[0]);

                if (token) {
                    formData.append(captchaFormKey, token);
                }

                contentType = false;
            }
            else {
                var formDataAsJson = {};

                $.each($form.serializeArray(), function (key, item) {
                    formDataAsJson[item.name] = item.value;
                });

                if (formDataAsJson.__RequestVerificationToken !== undefined) {
                    headers['RequestVerificationToken'] = formDataAsJson.__RequestVerificationToken;
                }

                if (token) {
                    forData[captchaFormKey] = token;
                }

                formData = JSON.stringify(formDataAsJson);

                contentType = "application/json; charset=utf-8";
            }

            $form.find('[type=submit]').each(function(){
                var i_length = $(this).find('i').length;
                console.log(i_length)
                if(i_length === 0){
                    $(this).append('<i class="fas fa-spinner fa-spin"></i>');
                }
            })

            $.ajax({
                url: options.url,
                type: options.method,
                headers: headers,
                data: formData,
                contentType: contentType,
                processData: false,
                beforeSend: function (jqXHR, settings) {
                    if (options.beforeSubmit) {
                        return window[options.beforeSubmit](jqXHR, settings, $form);
                    }
                }
            }).done(function (result, status) {
                if (result.succeeded === false) {
                    $form.enableSubmitButtons();
                    $form.find('.spinnerbtn').remove();
                    $form.find('.element.submit .btn').show();
                }

                if(result.succeeded === true){
                    var formID = $form.attr('id');
                    var havePreviouslySignedInKeyName = "HavePreviouslySignedIn";
                    if(formID === "formhelper_login645"){
                        localStorage.setItem(havePreviouslySignedInKeyName, "true");
                    }
                }

                if (result.redirectUri) {
                    toastrOptions = {
                        timeOut: 0,
                        extendedTimeOut: 0
                    };
                }

                var hasMessage = result.message && result.message !== "";

                if (hasMessage) {
                    if (result.status === 1) {
                        toastr.success(result.message, null, toastrOptions);
                    } else if (result.status === 2) {
                        toastr.info(result.message, null, toastrOptions);
                    } else if (result.status === 3) {
                        toastr.warning(result.message, null, toastrOptions);
                    } else if (result.status === 4) {
                        toastr.error(result.message, null, toastrOptions);
                    }
                } else if (result.succeeded === false) {
                    toastr.error(options.checkTheFormFieldsMessage, null, toastrOptions);
                }

                if (result.validationErrors && result.validationErrors.length > 0) {
                    $form.showErrors({ errors: result.validationErrors });
                }

                if (options.callback) {
                    callFunction(options.callback, result);
                }

                var delay = result.redirectDelay ? result.redirectDelay : options.redirectDelay;

                if (result.redirectUri) {
                    setTimeout(function () {
                        window.location.replace(result.redirectUri);
                    }, hasMessage ? delay : 1);
                }

                if (result.status === 1) {
                    if (options.enableButtonAfterSuccess) {
                        $form.enableSubmitButtons();
                    }

                    if (options.resetFormAfterSuccess) {
                        $form[0].reset();
                    }
                }
            }).fail(function (request, status, error) {
                console.error(request, status, error);
                toastr.error(request.status + ': ' + request.statusText, null, toastrOptions);
            }).always(function () {
                $form.find('[type=submit]').find('i').remove();
            });
        }
    };

    $.formhelper.defaultOptions = {
        url: '#',
        method: 'POST',
        dataType: 'FormData',
        checkTheFormFieldsMessage: 'Check form fields',
        redirectDelay: 1500,
        beforeSubmit: null,
        callback: null,
        enableButtonAfterSuccess: false,
        resetFormAfterSuccess: false,
        toastrPositionClass: null
    };

    $.fn.UseFormHelper = function (options) {
        if (!options)
            options = {
                url: $(this).attr("action"),
                method: $(this).attr("method"),
                dataType: $(this).attr("dataType"),
                checkTheFormFieldsMessage: $(this).attr("checktheformfieldsmessage"),
                redirectDelay: parseInt($(this).attr("redirectdelay")),
                beforeSubmit: $(this).attr("beforesubmit"),
                callback: $(this).attr("callback"),
                enableButtonAfterSuccess: $(this).attr("enablebuttonaftersuccess") === "True" || $(this).attr("enablebuttonaftersuccess") === "true",
                resetFormAfterSuccess: $(this).attr("resetformaftersuccess") === "True" || $(this).attr("resetformaftersuccess") === "true",
                toastrPositionClass: $(this).attr("toastrposition")
            };

        return new $.formhelper(options, this);
    };

    $.fn.fillFormFields = function (data, callbacks) {
        var that = this;

        var options = {
            data: data || null,
            callbacks: callbacks
        };

        if (options.data !== null) {
            $.each(options.data, function (k, v) {
                if (options.callbacks !== null && options.callbacks.hasOwnProperty(k)) {
                    options.callbacks[k](v);
                } else {
                    $('[name="' + k + '"]', that).val(v);
                }
            });
        }
    };
})(jQuery);

$("[data-vennture-form], [vennture-form]").each(function () {
    $(this).UseFormHelper(); 
});
