// Snippet should be placed in customer's layout page
// 
//<script type="text/javascript">
//    window.hfAccountId = "CustomerId";
//    window.hfDomain = "API Domain";
//    (function () {
//        var hf = document.createElement('script'); hf.type = 'text/javascript'; hf.async = true;
//        hf.src = hfDomain + '/scripts/hf.js';
//        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(hf, s);
//    })();
//</script>

(function (window, document) {
    function trackPageEvent(clickText) {
        var candidateId = getCandidateId();

        if (candidateId) {
            var url = window.location.href;
            var pageTitle = document.title;

            var apiUrl = window.hfCustomer.ApiUrl + 'tracking/trackpageevent?customerId=' + encodeURIComponent(window.hfAccountId) + '&candidateId=' + encodeURIComponent(candidateId) + '&url=' + encodeURIComponent(url) + '&pageTitle=' + encodeURIComponent(pageTitle);

            if (clickText)
                apiUrl += '&clickText=' + encodeURIComponent(clickText);

            executeApiRequest(apiUrl);
        }
    }

    function testTrackingCode() {
        var url = window.location.href;
        var pageTitle = document.title;
        var clickTextData = "";

        var elements = getClickableElements();
        for (var i = 0; i < elements.length; i++) {
            var clickText = getClickText(elements[i]);
            if (clickText) {
                clickTextData = clickTextData + clickText + "|";
            }
        }
        clickTextData = clickTextData.slice(0, -1);

        var apiUrl = window.hfCustomer.ApiUrl + 'tracking/testTrackingCode?customerId=' + encodeURIComponent(window.hfAccountId) + '&url=' + encodeURIComponent(url) + '&pageTitle=' + encodeURIComponent(pageTitle) + '&clickTextData=' + encodeURIComponent(clickTextData);
        executeApiRequest(apiUrl);
    }

    function scrapeJobs() {
        getJobScrapingRules(function (response) {
            var jobScrapingRules = response.Data;
            var delayAfterPageLoad = jobScrapingRules.DelayAfterPageLoad * 1000;

            var searchInputValuesParameter = getQueryVariable("searchInputValues");
            if (searchInputValuesParameter) {
                setTimeout(function () {
                    triggerAdvancedSearch(jobScrapingRules, searchInputValuesParameter);
                    scrapeJobsAfterDelay(jobScrapingRules, delayAfterPageLoad);
                }, delayAfterPageLoad);
            }
            else {
                scrapeJobsAfterDelay(jobScrapingRules, delayAfterPageLoad);
            }
        });
    }

    function scrapeJobsAfterDelay(jobScrapingRules, delayAfterPageLoad) {
        setTimeout(function () {
            var jobs = [];
            var jobContainers = document.body.querySelectorAll(jobScrapingRules.JobContainerSelector);
            var maxJobs = 10;

            for (var i = 0; i < jobContainers.length; i++) {
                var jobContainerElement = jobContainers[i];

                var jobUrlValue = getElementValue(jobContainerElement, jobScrapingRules.JobUrlSelector, jobScrapingRules.JobUrlProperty);
                var jobTitleValue = getElementValue(jobContainerElement, jobScrapingRules.JobTitleSelector, jobScrapingRules.JobTitleProperty);
                var jobSummaryValue = getElementValue(jobContainerElement, jobScrapingRules.JobSummarySelector, jobScrapingRules.JobSummaryProperty);
                var jobIdValue = getElementValue(jobContainerElement, jobScrapingRules.JobIdSelector, jobScrapingRules.JobIdProperty);
                var jobOwnerIdValue = getElementValue(jobContainerElement, jobScrapingRules.JobOwnerSelector, jobScrapingRules.JobOwnerProperty);

                var job = {
                    Url: jobUrlValue,
                    Title: jobTitleValue,
                    Summary: jobSummaryValue,
                    AtsJobId: jobIdValue,
                    OwnerId: jobOwnerIdValue
                };

                if (job.Url && job.Title)
                    jobs.push(job);

                if (jobs.length >= maxJobs)
                    break;
            }

            loadJobs(jobs);
        }, delayAfterPageLoad);
    }

    function loadForms() {
        var candidateId = getCandidateId();
        if (document.body) {
            var forms = document.body.querySelectorAll('*[id^="hfFormContainer"]');
            for (var i = 0; i < forms.length; i++) {
                var hfContainer = forms[i];

                getFormData(hfContainer, function (container, response) {
                    var hfFormData = response.Data;
                    var form = container.querySelector('form');

                    form.addEventListener("submit", function (event) {
                        event.preventDefault();

                        submitForm(container, form, hfFormData, candidateId);
                    });

                    var submitButton = form.querySelector('#hfFormSubmit');
                    submitButton.value = hfFormData.SubmitLabel;

                    if (!candidateId) {
                        var formGroupEmail = form.querySelector('#hfFormGroupEmail');
                        formGroupEmail.removeAttribute('hidden');

                        var candidateEmail = form.querySelector('#hfFormEmail');
                        candidateEmail.setAttribute('required', '');
                    }

                    form.removeAttribute('hidden');
                });
            }
        }
    }

    function displaySurvey() {
        var surveyParameter = getQueryVariable('survey');
        var decodedProperties = null;
        if (surveyParameter) {
            decodedProperties = '?' + decodeBase64Url(surveyParameter);           
        }

        var surveyId = getQueryVariable('surveyId', decodedProperties);
        if (surveyId > 0) {
            var answerId = getQueryVariable('answerId', decodedProperties);
            var testCandidateId = getQueryVariable('testCandidateId', decodedProperties);
            var testEntityId = getQueryVariable('testEntityId', decodedProperties);
            var isChat = getQueryVariable('isChat', decodedProperties);

            var isTest = testCandidateId > 0 || window.location.href.toLowerCase().endsWith('istest=true');
            var surveyCandidateId = isTest ? testCandidateId : getCandidateId(decodedProperties);
            var entityId = (testEntityId > 0) ? testEntityId : getQueryVariable('eId', decodedProperties);
            var webDomain = getWebDomain();

            if (isChat) {
                loadChat(surveyId, answerId, surveyCandidateId, entityId, webDomain, isTest, true);
            }
            else {
                loadSurvey(surveyId, answerId, surveyCandidateId, entityId, webDomain, isTest);
            }
        }
        else {
            var isTestChat = window.location.href.toLowerCase().endsWith('istest=true');
            var candidateId = getCandidateId();

            if (candidateId) {
                getDefaultChatId(candidateId, function(chatId) {
                    loadChat(chatId, undefined, candidateId, candidateId, getWebDomain(), isTestChat, false);
                });
            }
            else {
                loadChat(window.hfCustomer.UnknownVisitorChatId, undefined, undefined, undefined, getWebDomain(), isTestChat, false);
            }
        }
    }

    function loadSurvey(surveyId, answerId, candidateId, entityId, webDomain, isTest) {
        addSurveyStylesheet(webDomain);

        var surveyWindow = ' \
        <div id="herefishSurveyOverlay" class="hf-survey-overlay"></div> \
        <div id="herefishSurvey" class="hf-survey-container is-centered"> \
            <div id="herefishSurveyCloseButton" class="hf-survey-close" onclick="closeHerefishSurvey()" style="background-color: {backgroundColor}; color: {color};">&times;</div> \
            <iframe id="herefishIframe" src="{srcUrl}" onload="showHerefishSurvey()"></iframe> \
            <h3 class="hf-loading">Loading...</h3> \
        </div>';

        var srcUrl = getSurveyUrl(surveyId, answerId, candidateId, entityId, webDomain, isTest, false);
        surveyWindow = surveyWindow.replace(/{backgroundColor}/g, window.hfCustomer.HeaderTextColor + "1A"); // Adds opacity of 10%
        surveyWindow = surveyWindow.replace(/{color}/g, window.hfCustomer.HeaderTextColor);
        surveyWindow = surveyWindow.replace('{srcUrl}', srcUrl);

        addSurveyElementsToDom(surveyWindow);
    }

    function loadChat(surveyId, answerId, candidateId, entityId, webDomain, isTest, expandChat) {
        if (!surveyId)
            return;

        window.hfSurveyId = surveyId;

        addSurveyStylesheet(webDomain);

        var chatBadge = ' \
            <div class="hf-chat-launcher-container"> \
                <div id="herefishChatPromptMessage" class="hf-chat-prompt-message" style="{chatPromptStyle}"> \
                    <div id="herefishChatPromptCloseButton" class="hf-survey-close is-chat" style="background-color: inherit; color: rgba(48, 56, 63); top: 0px; right: 0px;" onclick="closeHerefishChatPromptMessage()">&times;</div> \
                    <p style="padding: 24px 16px 16px;" onclick="expandChat()">{chatPromptMessage}</p> \
                </div> \
                <div> \
                    <div id="herefishExpandChat" class="hf-chat-launcher" style="background-color: {badgeColor};{expandDisplayStyle}" onclick="expandChat()"> \
                        <img class="hf-chat-launcher-content hf-chat-expand" src="{expandUrl}" /> \
                    </div> \
                    <div id="herefishCollapseChat" class="hf-chat-launcher" style="background-color: {badgeColor};display: none;" onclick="collapseChat()"> \
                        <img class="hf-chat-launcher-content" src="{collapseUrl}" /> \
                    </div> \
                </div> \
            </div>';

        chatBadge = chatBadge.replace(/{badgeColor}/g, window.hfCustomer.ButtonColor);
        chatBadge = chatBadge.replace('{expandUrl}', window.hfDomain + '/Images/chat-icon-white.png');
        chatBadge = chatBadge.replace('{collapseUrl}', window.hfDomain + '/Images/x-icon-white.png');
        chatBadge = expandChat ? chatBadge.replace('{expandDisplayStyle}', 'display: none;') : chatBadge.replace('{expandDisplayStyle}', '');
        chatBadge = expandChat ? chatBadge.replace('{chatExpandStyle}', '') : chatBadge.replace('{chatExpandStyle}', 'hf-chat-expand');
        chatBadge = chatBadge.replace('{chatPromptMessage}', window.hfCustomer.WebsiteChatPrompt);
        chatBadge = !candidateId && window.hfCustomer.DisplayWebsiteChatPrompt ? chatBadge.replace('{chatPromptStyle}', '') : chatBadge.replace('{chatPromptStyle}', 'display: none;');
        // TODO: If we want to show this message for default candidate/salescontact, change to !expandChat

        addSurveyElementsToDom(chatBadge);

        if (expandChat) {
            addChatWindowToDom(surveyId, answerId, candidateId, entityId, webDomain, isTest);
        }
    }

    function getDefaultChatId(candidateId, callback) {
        var url = window.hfCustomer.ApiUrl + 'surveyBranding/getDefaultChatId/' + encodeURIComponent(window.hfAccountId) + '/' + candidateId;
        ajaxGetRequest(url, function (response) {
            var chatId = response.Data.Int;

            if (callback)
                callback(chatId);
        });
    }

    function addChatWindowToDom(surveyId, answerId, candidateId, entityId, webDomain, isTest) {
        var chatWindow = ' \
                <div id="herefishSurvey" class="hf-survey-container is-chat"> \
                    <div id="herefishSurveyCloseButton" class="hf-survey-close is-chat" style="background-color: {backgroundColor}; color: {headerTextColor};" onclick="collapseChat()">&times;</div> \
                    <iframe id="herefishIframe" src="{srcUrl}" onload="showHerefishChat()"></iframe> \
                    <h3 class="hf-loading">Loading...</h3> \
                </div>';

        var srcUrl = getSurveyUrl(surveyId, answerId, candidateId, entityId, webDomain, isTest, true);
        chatWindow = chatWindow.replace(/{backgroundColor}/g, window.hfCustomer.HeaderTextColor + "1A"); // Adds opacity of 10%
        chatWindow = chatWindow.replace(/{headerTextColor}/g, window.hfCustomer.HeaderTextColor);
        chatWindow = chatWindow.replace('{srcUrl}', srcUrl);

        addSurveyElementsToDom(chatWindow);
    }

    function displayCalendar() {
        var displayName = getQueryVariable('cal');
        var calUserId = getQueryVariable('calUserId');

        if (displayName) {
            getAtsUserCalendarLinkByDisplayName(displayName, function (response) {
                if (!response)
                    return;

                var nylasCalendarLink = response.Data;
                displayNylasCalendar(nylasCalendarLink);
            });
        }
        else if (calUserId) {
            getAtsUserCalendarLinkByUserId(calUserId, function (response) {
                if (!response)
                    return;

                var nylasCalendarLink = response.Data;
                displayNylasCalendar(nylasCalendarLink);
            });
        }
    }

    function displayNylasCalendar(nylasCalendarLink) {
        // CSS
        var link = document.createElement('link');
        link.type = 'text/css';
        link.rel = 'stylesheet';
        link.href = getWebDomain() + 'Content/herefish-survey.css';
        document.head.appendChild(link);

        // HTML
        var calendarWindow = ' \
                <div id="calendarOverlay" class="hf-survey-overlay"></div> \
                <div id="calendarContainer" class="hf-survey-container is-centered" style="height: 650px"> \
                    <div id="calendarCloseButton" class="hf-survey-close" onclick="closeCalendar()" style="background-color: inherit; color: #000000; font-size: 35px; right: 20px; top: 20px; line-height: .7em;">&times;</div> \
                    <iframe id="calendarIframe" src="{srcUrl}" onload="showCalendar()"></iframe> \
                    <h3 id="calendarLoadingIndicator" class="hf-loading">Loading...</h3> \
                </div>';

        calendarWindow = calendarWindow.replace('{srcUrl}', nylasCalendarLink);

        addSurveyElementsToDom(calendarWindow);
    }

    function decodeBase64Url(input) {
        // Replace non-url compatible chars with base64 standard chars
        input = input
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        // Pad out with standard base64 required padding characters
        var pad = input.length % 4;
        if (pad) {
            if (pad === 1) {
                throw new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');
            }
            input += new Array(5 - pad).join('=');
        }

        return atob(input);
    }

    function executeApiRequest(apiUrl) {
        var oImg = document.createElement("img");
        oImg.setAttribute('src', apiUrl);
    }

    function ajaxGetRequest(url, successCallback) {
        var request = new XMLHttpRequest();
        request.onload = function (e) {
            if (successCallback) {
                var response = (typeof (e.target.response) === "string") ? JSON.parse(e.target.response) : e.target.response;
                successCallback(response);
            }
        };

        var queryParameterOperator = url.indexOf("?") !== -1 ? "&" : "?";
        var bustCacheUrl = url + queryParameterOperator + "bustCache=" + new Date().getTime();
        request.open('GET', bustCacheUrl + '?' + new Date().getTime(), true);
        request.responseType = 'json';
        request.send();
    }

    function ajaxPostRequest(url, data, successCallback) {
        var request = new XMLHttpRequest();
        request.onload = function (e) {
            if (successCallback) {
                var response = (typeof (e.target.response) === "string") ? JSON.parse(e.target.response) : e.target.response;
                successCallback(response);
            }
        };

        request.open('POST', url, true);
        request.responseType = 'json';
        request.setRequestHeader("Content-type", "application/json");
        request.send(JSON.stringify(data));
    }

    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        var domain = '.' + getDomainName(window.location.hostname);
        var cookie = cname + "=" + cvalue + "; domain=" + domain + "; path=/; " + expires + "; SameSite=None; Secure";
        document.cookie = cookie;
    }

    function getCandidateId(url) {
        var candidateId = getQueryVariable("hf", url);

        if (candidateId) {
            return candidateId;
        }

        var name = "hf_id=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0)
                return c.substring(name.length, c.length);
        }
        return undefined;
    }

    function getUnknownVisitorId() {
        var unknownVisitorId;

        var name = "hf_uuid=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1);
            if (c.indexOf(name) == 0) {
                unknownVisitorId = c.substring(name.length, c.length);
                break;
            }
        }

        if (unknownVisitorId)
            return unknownVisitorId;

        return uuidv4();
    }

    function uuidv4() {
        function _p8(s) {
            var p = (Math.random().toString(16) + "000000000").substr(2, 8);
            return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
        }
        return _p8() + _p8(true) + _p8(true) + _p8();
    }

    function getQueryVariable(variable, url) {
        if (!url) {
            url = window.location.href;
        }
        var index = url.lastIndexOf("?");
        if (index > -1) {
            var query = url.substring(index + 1);
            var vars = query.split('&');
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split('=');
                var variableName = decodeURIComponent(pair[0]);

                if (variableName != undefined && variableName.toLowerCase() == variable.toLowerCase()) {
                    var value = pair[1];
                    var hashTagIndex = value.indexOf('#');
                    if (hashTagIndex >= 0)
                        value = value.substring(0, hashTagIndex);

                    return decodeURIComponent(value);
                }
            }
        }
        return undefined;
    }

    function getDomainName(hostname) {
        var i = 0, domain = hostname, p = domain.split('.'), s = '_gd' + (new Date()).getTime();
        while (i < (p.length - 1) && document.cookie.indexOf(s + '=' + s) == -1) {
            domain = p.slice(-1 - (++i)).join('.');
            document.cookie = s + "=" + s + ";domain=" + domain + ";";
        }
        document.cookie = s + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=" + domain + ";";
        return domain;
    }

    function getClickableElements() {
        var elements = [];

        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            var input = inputs[i];
            if (input.type.toLowerCase() === "button" || input.type.toLowerCase() === "submit") {
                elements.push(input);
            }
        }

        var buttons = document.getElementsByTagName("button");
        for (var j = 0; j < buttons.length; j++) {
            elements.push(buttons[j]);
        }

        var hrefs = document.getElementsByTagName("a");
        for (var k = 0; k < hrefs.length; k++) {
            elements.push(hrefs[k]);
        }

        return elements;
    }

    function getClickText(element) {
        var clickText = undefined;
        var clickableElement = undefined;

        if (isClickable(element))
            clickableElement = element;

        if (element.parentElement && isClickable(element.parentElement))
            clickableElement = element.parentElement;

        if (clickableElement) {
            if (clickableElement.tagName.toLowerCase() === "input") {
                clickText = clickableElement.value.trim().substring(0, 50);
            }
            else if (clickableElement.tagName.toLowerCase() === "button" || clickableElement.tagName.toLowerCase() === "a") {
                clickText = clickableElement.textContent.trim().substring(0, 50);
            }
        }

        return clickText;
    }

    function isClickable(element) {
        if (element.tagName.toLowerCase() === "button" || element.tagName.toLowerCase() === "a") {
            return true;
        }

        if (element.tagName.toLowerCase() === "input" && (element.type.toLowerCase() === "button" || element.type.toLowerCase() === "submit")) {
            return true;
        }

        return false;
    }

    function getElementValue(containerElement, selector, field) {
        var element = (selector === "jobcontainer") ? containerElement : containerElement.querySelector(selector);
        if (!element) {
            return undefined;
        }

        return element[field];
    }

    function getJobScrapingRules(successCallback) {
        var url = window.hfCustomer.ApiUrl + 'jobScraping/getByExternalId/' + encodeURIComponent(window.hfAccountId);
        ajaxGetRequest(url, function (response) {
            successCallback(response);
        });
    }

    function getAtsUserCalendarLinkByDisplayName(displayName, successCallback) {
        var url = window.hfCustomer.ApiUrl + 'atsUsers/getCalendarLinkByDisplayName?customerId=' + encodeURIComponent(window.hfAccountId) + '&displayName=' + displayName;
        ajaxGetRequest(url, function (response) {
            successCallback(response);
        });
    }

    function getAtsUserCalendarLinkByUserId(id, successCallback) {
        var url = window.hfCustomer.ApiUrl + 'atsUsers/getCalendarLinkById?customerId=' + encodeURIComponent(window.hfAccountId) + '&atsUserId=' + id;
        ajaxGetRequest(url, function (response) {
            successCallback(response);
        });
    }

    function loadJobs(jobs) {
        console.log(jobs);

        var loadJobsUrl = window.hfCustomer.ApiUrl + 'jobScraping/loadJobs';
        var jobFeedId = getQueryVariable("jobFeedId");
        var data = { CustomerId: window.hfAccountId, Jobs: jobs, JobFeedId: jobFeedId };
        ajaxPostRequest(loadJobsUrl, data);
    }

    function triggerAdvancedSearch(jobScrapingRules, searchInputValuesParameter) {
        var searchInputValues = getSearchInputValues(searchInputValuesParameter);
        for (var i = 0; i < searchInputValues.length; i++) {
            var searchInputValue = searchInputValues[i];
            var searchInput = getSearchInputById(jobScrapingRules, searchInputValue.SearchInputId);

            setElementValue(searchInput, searchInputValue.Value);
        }

        var searchButton = document.body.querySelector(jobScrapingRules.SearchButtonSelector);
        if (searchButton)
            searchButton.click();
    }

    function setElementValue(searchInput, value) {
        var element = document.body.querySelector(searchInput.InputSelector);
        if (searchInput.InputType === 0) {
            element.checked = true;
        }
        else if (searchInput.InputType === 1) {
            element.value = value;
        }

        var changeEvent = new Event('change', { bubbles: true });
        element.dispatchEvent(changeEvent);
    }

    function getSearchInputById(jobScrapingRules, searchInputId) {
        for (var i = 0; i < jobScrapingRules.SearchInputs.length; i++) {
            var searchInput = jobScrapingRules.SearchInputs[i];
            if (searchInput.Id === searchInputId) {
                return searchInput;
            }
        }

        return undefined;
    }

    function getSearchInputValues(searchInputValuesParameter) {
        var searchInputTextValues = searchInputValuesParameter.split("|");
        var searchInputValues = [];

        for (var i = 0; i < searchInputTextValues.length; i++) {
            var searchInputValueText = searchInputTextValues[i];
            var underscoreIndex = searchInputValueText.indexOf("_");

            var searchInputValue = {};
            if (underscoreIndex > 0) {
                searchInputValue.SearchInputId = parseInt(searchInputValueText.substring(0, underscoreIndex));
                searchInputValue.Value = searchInputValueText.substring(underscoreIndex + 1);
            }
            else {
                searchInputValue.SearchInputId = parseInt(searchInputValueText);
            }

            searchInputValues.push(searchInputValue);
        }

        return searchInputValues;
    }

    function getFormData(container, successCallback) {
        var formId = container.id.substring("hfFormContainer".length);
        
        var url = window.hfCustomer.ApiUrl + 'forms/getById?customerId=' + encodeURIComponent(window.hfAccountId) + '&formId=' + encodeURIComponent(formId);
        ajaxGetRequest(url, function (response) {
            successCallback(container, response);
        });
    }

    function submitForm(hfContainer, form, hfFormData, candidateId) {
        try {
            var submitButton = form.querySelector('#hfFormSubmit');
            submitButton.value = 'Saving...';
            submitButton.setAttribute('disabled', '');

            var data = {
                CustomerId: window.hfAccountId,
                FormId: hfFormData.Id,
                CandidateId: candidateId,
                FieldValues: []
            };

            if (!data.CandidateId) {
                var candidateEmail = form.querySelector('#hfFormEmail');
                data.CandidateEmail = candidateEmail.value;
            }

            for (var i = 0; i < hfFormData.Fields.length; i++) {
                var formField = hfFormData.Fields[i];
                var formFieldValue = getFormFieldValue(form, formField);
                var formFieldData = {
                    Id: formField.Id,
                    Value: formFieldValue
                };
                data.FieldValues.push(formFieldData);
            }

            var url = window.hfCustomer.ApiUrl + 'forms/submit';
            ajaxPostRequest(url, data, function (response) {
                if (response && response.ResultCode === 0) {
                    var formCompletionMessage = hfContainer.querySelector('#hfFormCompletionMessage');
                    formCompletionMessage.innerHTML = hfFormData.CompletionMessage;
                    formCompletionMessage.removeAttribute('hidden');

                    form.setAttribute('hidden', true);
                }
                else {
                    displayFormSubmitErrorMessage(hfContainer);
                }
            });
        }
        catch (exception) {
            displayFormSubmitErrorMessage(hfContainer, form);
        }
    }

    function displayFormSubmitErrorMessage(hfContainer, form) {
        var formErrorMessage = hfContainer.querySelector('#hfFormErrorMessage');
        formErrorMessage.removeAttribute('hidden');

        if (form)
            form.setAttribute('hidden', true);
    }

    function getFormFieldValue(form, formField) {
        var formFieldInput = form.querySelector('#hfFormField' + formField.Id);

        if (formField.InputType === 1 || formField.InputType === 2)
            return formFieldInput.checked;

        if (formField.InputType === 3)
            return formFieldInput.selected;

        return formFieldInput.value;
    }

    function addSurveyStylesheet(webDomain) {
        var link = document.createElement('link');
        link.type = 'text/css';
        link.rel = 'stylesheet';
        link.href = webDomain + 'Content/herefish-survey.css';
        document.head.appendChild(link);
    }

    function getSurveyUrl(surveyId, answerId, candidateId, entityId, webDomain, isTest, isChat) {
        var surveyAction = 'CandidateSurvey';
        var unknownVisitorId;

        if (isChat) {
            surveyAction = 'CandidateChat';
            if (!candidateId) {
                candidateId = entityId = 0;
                unknownVisitorId = getUnknownVisitorId();
            }
        }

        var surveyUrl = webDomain + 'Surveys/' + surveyAction + '?customerId=' + encodeURIComponent(window.hfAccountId) + '&surveyId=' + surveyId + '&candidateId=' + candidateId + '&entityId=' + entityId;
        if (answerId)
            surveyUrl += '&answerId=' + answerId;
        if (isTest)
            surveyUrl += '&isTest=true';
        if (unknownVisitorId)
            surveyUrl += '&unknownVisitorId=' + unknownVisitorId;

        return surveyUrl;
    }

    function addSurveyElementsToDom(surveyElements) {
        var div = document.createElement('div');
        div.innerHTML = surveyElements;

        if (!document.body) {
            setTimeout(function () {
                document.body.appendChild(div);
            }, 1000);
        }
        else {
            document.body.appendChild(div);
        }
    }

    document.showHerefishSurvey = function () {
        var iframe = document.getElementById('herefishIframe');
        var surveyCloseButton = document.getElementById('herefishSurveyCloseButton');

        iframe.style.zIndex = 9999;
        surveyCloseButton.style.zIndex = 10000;

        document.body.classList.add('hf-noscroll');
    }

    document.closeHerefishSurvey = function () {
        var surveyContainer = document.getElementById('herefishSurvey');
        var surveyCloseButton = document.getElementById('herefishSurveyCloseButton');
        var surveyOverlay = document.getElementById('herefishSurveyOverlay');

        surveyContainer.style.display = 'none';
        surveyCloseButton.style.display = 'none';
        surveyOverlay.style.display = 'none';

        document.body.classList.remove('hf-noscroll');
    }

    document.showHerefishChat = function () {
        var iframe = document.getElementById('herefishIframe');
        var surveyCloseButton = document.getElementById('herefishSurveyCloseButton');
        var expandChat = document.getElementById('herefishExpandChat');
        var collapseChat = document.getElementById('herefishCollapseChat');

        iframe.style.zIndex = 9999;
        surveyCloseButton.style.zIndex = 10000;
        expandChat.style.display = 'none';
        collapseChat.style.display = 'flex';
    }

    document.collapseChat = function () {
        var surveyContainer = document.getElementById('herefishSurvey');
        var surveyCloseButton = document.getElementById('herefishSurveyCloseButton');
        var expandChat = document.getElementById('herefishExpandChat');
        var collapseChat = document.getElementById('herefishCollapseChat');

        surveyContainer.style.display = 'none';
        surveyCloseButton.style.display = 'none';
        expandChat.style.display = 'flex';
        collapseChat.style.display = 'none';

        document.closeHerefishChatPromptMessage();
    }

    document.expandChat = function () {
        var surveyContainer = document.getElementById('herefishSurvey');

        if (surveyContainer) {
            var surveyCloseButton = document.getElementById('herefishSurveyCloseButton');
            var expandChat = document.getElementById('herefishExpandChat');
            var collapseChat = document.getElementById('herefishCollapseChat');

            surveyContainer.style.display = '';
            surveyCloseButton.style.display = '';
            expandChat.style.display = 'none';
            collapseChat.style.display = 'flex';
        }
        else {
            var candidateId = getCandidateId();
            var isTestChat = window.location.href.toLowerCase().endsWith('istest=true');
            addChatWindowToDom(window.hfSurveyId, undefined, candidateId, candidateId, getWebDomain(), isTestChat);
        }

        document.closeHerefishChatPromptMessage();
    }

    document.closeHerefishChatPromptMessage = function () {
        var chatPromptMessage = document.getElementById('herefishChatPromptMessage');
        chatPromptMessage.style.display = 'none';
    }

    document.showCalendar = function () {
        var iframe = document.getElementById('calendarIframe');
        var calendarCloseButton = document.getElementById('calendarCloseButton');
        var loadingIndicator = document.getElementById('calendarLoadingIndicator');

        iframe.style.zIndex = 9999;
        calendarCloseButton.style.zIndex = 10000;
        loadingIndicator.style.display = 'none';

        document.body.classList.add('hf-noscroll');
    }

    document.closeCalendar = function () {
        var calendarContainer = document.getElementById('calendarContainer');
        var calendarCloseButton = document.getElementById('calendarCloseButton');
        var calendarOverlay = document.getElementById('calendarOverlay');

        calendarContainer.style.display = 'none';
        calendarCloseButton.style.display = 'none';
        calendarOverlay.style.display = 'none';

        document.body.classList.remove('hf-noscroll');
    }

    function getWebDomain() {
        if (window.hfDomain.indexOf('localhost') > -1)
            return 'http://localhost:41118/';
        else if (window.hfDomain.indexOf('dev-herefish-shared.azurewebsites.net') > -1)
            return 'https://dev-herefish-web.azurewebsites.net/';
        else if (window.hfDomain.indexOf('test-herefish-shared.azurewebsites.net') > -1)
            return 'https://test-herefish-web.azurewebsites.net/';
        else if (window.hfDomain.indexOf('test-herefish-shared2.azurewebsites.net') > -1)
            return 'https://test-herefish-web2.azurewebsites.net/';
        else if (window.hfDomain.indexOf('api.herefish.com') > -1)
            return 'https://app.herefish.com/';

        return undefined;
    }

    function handleClickEvent(event) {
        var clickText = getClickText(event.target);
        if (clickText) {
            trackPageEvent(clickText);
        }
    };

    function handleOnLoad() {
        if (window.testTrackingCode)
            testTrackingCode();

        if (window.scrapeJobs)
            scrapeJobs();

        document.body.addEventListener('click', handleClickEvent);
    }

    if (window.hfAccountId && window.hfDomain && !window.hfScriptLoaded) {
        window.hfScriptLoaded = true;
        window.testTrackingCode = getQueryVariable("testTrackingCode");
        window.scrapeJobs = getQueryVariable("scrapeJobs");

        var candidateId = getQueryVariable("hf");
        if (candidateId) {
            setCookie("hf_id", candidateId, 365);
        }

        var url = window.hfDomain + '/customers/getSnippetData/' + encodeURIComponent(window.hfAccountId);
        ajaxGetRequest(url, function (response) {
            // If there is an error, just return and don't try to do anything
            if (!response || response.ResultCode === 1)
                return;

            window.hfCustomer = response.Data;

            trackPageEvent();
            loadForms();
            displaySurvey();
            displayCalendar();
        });

        if (document.readyState === 'complete')
            window.setTimeout(handleOnLoad, 100);
        else
            window.addEventListener('load', handleOnLoad);
    }

    // Used for testing the image converter
    //function addMessageToDom(message) {
    //    var div = document.createElement('div');
    //    div.innerHTML = '<h3>' + message + '</h3>';
    //    var body = document.getElementsByTagName('body')[0];
    //    body.insertBefore(div, body.firstChild);
    //}

})(window, document);